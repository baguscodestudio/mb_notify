{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleClose","event","reason","notifications","state","show","setState","setTimeout","shift","window","addEventListener","data","action","notification","type","vertical","horizontal","duration","variant","message","this","Snackbar","anchorOrigin","open","autoHideDuration","onClose","Alert","severity","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAwEeA,EApEf,kDACC,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IA8BPC,YAAc,SAACC,EAAOC,GACrB,IAAIC,EAAgB,EAAKC,MAAMD,cAC/BA,EAAc,GAAGE,MAAO,EACxB,EAAKC,SAAS,CAAEH,cAAeA,IAC/BI,YAAW,WACVJ,EAAcK,QACd,EAAKF,SAAS,CAAEH,cAAeA,MAC7B,MAnCH,EAAKC,MAAQ,CACZD,cAAe,IAJE,EADpB,qDASC,WAAqB,IAAD,OACnBM,OAAOC,iBAAiB,WAAW,SAACT,GACnC,OAAQA,EAAMU,KAAKC,QAClB,IAAK,UACJ,IAAIC,EAAe,CAClBR,MAAM,EACNS,KAAMb,EAAMU,KAAKG,KACjBC,SAAUd,EAAMU,KAAKI,SACrBC,WAAYf,EAAMU,KAAKK,WACvBC,SAAUhB,EAAMU,KAAKM,SACrBC,QAASjB,EAAMU,KAAKO,QACpBC,QAASlB,EAAMU,KAAKQ,SAErB,EAAKb,SAAS,CACbH,cAAc,GAAD,mBAAM,EAAKC,MAAMD,eAAjB,CAAgCU,YAvBnD,oBA0CC,WACC,OACC,8BACEO,KAAKhB,MAAMD,cAAc,IACzB,cAACkB,EAAA,EAAD,CACCC,aAAc,CACbP,SAAUK,KAAKhB,MAAMD,cAAc,GAAGY,SACtCC,WAAYI,KAAKhB,MAAMD,cAAc,GAAGa,YAEzCO,KAAMH,KAAKhB,MAAMD,cAAc,GAAGE,KAClCmB,iBAAkBJ,KAAKhB,MAAMD,cAAc,GAAGc,SAC9CQ,QAASL,KAAKpB,YAPf,SASC,cAAC0B,EAAA,EAAD,CACCC,SAAUP,KAAKhB,MAAMD,cAAc,GAAGW,KACtCI,QAASE,KAAKhB,MAAMD,cAAc,GAAGe,QAFtC,SAIEE,KAAKhB,MAAMD,cAAc,GAAGgB,kBA3DpC,GAAyBS,aCQVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c5e0045.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Snackbar } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\nexport class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tnotifications: [],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener('message', (event) => {\n\t\t\tswitch (event.data.action) {\n\t\t\t\tcase 'display':\n\t\t\t\t\tlet notification = {\n\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\ttype: event.data.type,\n\t\t\t\t\t\tvertical: event.data.vertical,\n\t\t\t\t\t\thorizontal: event.data.horizontal,\n\t\t\t\t\t\tduration: event.data.duration,\n\t\t\t\t\t\tvariant: event.data.variant,\n\t\t\t\t\t\tmessage: event.data.message,\n\t\t\t\t\t};\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tnotifications: [...this.state.notifications, notification],\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\thandleClose = (event, reason) => {\n\t\tlet notifications = this.state.notifications;\n\t\tnotifications[0].show = false;\n\t\tthis.setState({ notifications: notifications });\n\t\tsetTimeout(() => {\n\t\t\tnotifications.shift();\n\t\t\tthis.setState({ notifications: notifications });\n\t\t}, 300);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.notifications[0] && (\n\t\t\t\t\t<Snackbar\n\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\t\tvertical: this.state.notifications[0].vertical,\n\t\t\t\t\t\t\thorizontal: this.state.notifications[0].horizontal,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\topen={this.state.notifications[0].show}\n\t\t\t\t\t\tautoHideDuration={this.state.notifications[0].duration}\n\t\t\t\t\t\tonClose={this.handleClose}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\tseverity={this.state.notifications[0].type}\n\t\t\t\t\t\t\tvariant={this.state.notifications[0].variant}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.notifications[0].message}\n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t</Snackbar>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}